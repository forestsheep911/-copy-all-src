name: Build and Release

on:
  release:
    types: [published]
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    permissions:
      contents: write
      packages: write
      issues: write
      deployments: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build executable
        run: python src/build.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      deployments: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts for Ubuntu
        uses: actions/download-artifact@v4
        with:
          name: executable-ubuntu-latest
          path: ./dist/ubuntu
      
      - name: List dist directory Linux
        run: ls -la ./dist/ubuntu
        
      - name: Download artifacts for macOS
        uses: actions/download-artifact@v4
        with:
            name: executable-macos-latest
            path: ./dist/macos
            
      - name: List dist directory macOS
        run: ls -la ./dist/macos

      - name: Download artifacts for Windows
        uses: actions/download-artifact@v4
        with:
          name: executable-windows-latest
          path: ./dist/windows

      - name: List dist directory after upload (Windows)
        if: runner.os == 'Windows'
        run: Get-ChildItem -Path ./dist/windows -Recurse

      - name: List dist directory after upload (Linux/macOS)
        if: runner.os != 'Windows'
        run: ls -la ./dist/windows

      - name: Create Release
        id: create_release
        # uses: actions/create-release@v1
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.payload.release.tag_name
            });
            core.setOutput('upload_url', release.upload_url);

      - name: Debug upload_url
        run: echo ${{ steps.create_release.outputs.upload_url }}

      - name: Upload Release Asset for Ubuntu
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/ubuntu/main
          asset_name: executable-ubuntu-latest.zip
          asset_content_type: application/zip

      - name: Upload Release Asset for macOS
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/macos/main
          asset_name: ./dist/macos/executable-macos-latest.zip
          asset_content_type: application/zip

      - name: Upload Release Asset for Windows
        if: always()
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./dist/windows/main
          asset_name: executable-windows-latest.zip
          asset_content_type: application/zip